67_1 Create mongodb atlas account for simple Crud server

https://www.mongodb.com/atlas/database > Sign In > Accept the Privacy Policy > submit > select option and programming language > free > AWS > ariaanahmed24 OX7qI > create user > cloud environment > configure ip address > add my current ip address > create and finish > setup > Network Access > Allow access from any where > confirm >then  Database Access ( ADD NEW DATABASE USER - er maddhome new user create kor jay)


i. data base > connect > driver > npm install mongodb > View full code sample

npm i express cors mongodb

67_2 Async Await, Try Catch and Connect to database


/-----async function-----\

i. async function run(){

}

ii. const run = async() => {

}

run().catch((error) => console.log(error))


67_3 Create client side post and Insert single user data

node mongodb crud -> https://www.mongodb.com/docs/drivers/node/current/usage-examples/#usage-examples (usage examples) -> https://www.mongodb.com/docs/drivers/node/current/usage-examples/insertOne/


67_4 Read Data Find find multiple user data and display on UI

CRUD er R(read) niye kaj cholche
i. ekta new component toiri korte and link korte hobe.
ii. https://www.mongodb.com/docs/drivers/node/current/usage-examples/find/ > 


67_5 Delete A User From the Database using UI click button

delete single a post > https://www.mongodb.com/docs/drivers/node/current/usage-examples/deleteOne/

67_6 (Recap) Create Read and delete And Show Remaining Users

Mongodb Connection
1. create account
2. create an user with password
3. whitelist IP address
4. database > connect > driver > Node > View full code
5. change the password the uri

1. CREATE ------ POST
2. app.post('/users'/ async (req,res) => {})
3. Make the function async to use await inside it 
4. Make sure you use the express.json() middleware 
5. access data from the body: const user = req.body 
6. const result = await userCollection.insertOne(user);
7. res.send(result)

CLIENT side:
1. create fetch
2. add second parameter as an object
3. provide method: 'POST'
4. add headers: {'content-type' : 'application/json'}
5. body: JSON.stringify(user)


READ server side (MANY):
1. create a cursor = userCollection.find()
2. const result = await cursor.toArray()

READ Client side:
1. normal loader diye fetch kora hoise data

DELETE server (single):
1. create app.delete('/users/:id', async(req, res) => {})
2. specify unique objectid to delete the right user
3. const query = {_id: new ObjectId(id)}
4. const result = await userCollection.deleteOne(query)

DELETE client:
1. create dynamic url with id
2. mention the DELETE method


67_8 Explore Put And Patch And Update User To Database

express basic routes > 

67_9 Module Summary and Mango Treat for you